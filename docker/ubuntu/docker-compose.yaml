version: "3.9"
name: devels-playground-ubuntu
services:
  base:
    build:
      context: .
      target: dvlp_base-fs
      # args: 
      #   - _AGL_USR=$_AGL
      #   - _DVL_USR=$_DVL
    init: true
    # command:
    # - /bin/bash
    # - -c
    # - export _AGL=agl
    # - export _HALO=${_HALO:-halo}
    # - sleep
    # - infinity
    # - ln -sf /home /mnt
    # - mkdir -p /mnt/data
    # - ln -sf /mnt/data /tmp/data
    # command: echo something
  base-good:
    # Need a user priviliged enough to chown
    user: root
    # Specify the wings in question
    group_add:
      - rootg
      - halo
      - hell
    build:
      context: .
      target: dvlp_base-fs_good
    depends_on:
      base:
        condition: service_completed_successfully
    init: true
    # volumes:
    #   - good-data:/root:ro
    #   - fs-data:/home/good
  base-angel:
    # Need a user priviliged enough to chown
    user: agl
    # Specify the wings in question
    group_add:
      - halo
    build:
      context: .
      target: dvlp_base-fs_angel
    depends_on:
      base:
        condition: service_completed_successfully
    init: true
    # volumes:
    #   - dvl-data:/home/agl
  base-devel:
    user: dvl
    group_add:
      - hell
    build:
      context: .
      target: dvlp_base-fs_devel
    depends_on:
      base:
        # Wait for groups to be added
        condition: service_completed_successfully
    # volumes:
    #   - dvl-data:/home/dvl
    init: true
  # alias(es) for agl
  # base-ausr:
  #   user: _AGL_USR
  #   extends: base-angel
  #   build:
  #     context: .
  #     target: dvlp_base-fs_angel
  #     args:
  #       - _AGL_USR=${_AGL:-angel}
  #   volumes:
  #     - agl-data:/home/${_AGL_USR}
  #   init: true
  # # alias(es) for dvl
  # base-daus:
  #   user: _DVL_USR
  #   extends: init-dvl
  #   build:
  #     context: .
  #     target: dvlp_base-fs_devel
  #     args:
  #       - _DVL_USR=${_DVL-:devel}
  #   volumes:
  #     - dvl-data:/home/$_DVL_USR
  repo:
    user: agl
    group_add:
      - halo
    build:
      context: .
      target: dvlp_repo
    depends_on:
      base:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-good:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-angel:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-devel:
        # Wait for the ownership to change
        condition: service_completed_successfully
    # # init: true
    # volumes_from:
    #   - base-angel
    #   - base-devel
    # volumes:
    #   - good-data:/root:ro
    #   - fs-data:/home/good:rw
    #   - dvl-data:/home/dvl
    #   # - dvl-data:/home/devel
    #   # - dvl-data:/home/${_DVL_USR:-dvl}
    #   # - agl-data:/home/${_AGL_USR:-agl}
    #   # - agl-data:/home/angel
    #   - agl-data:/home/agl
    #   - dls-data:/dls
    #   - mnt-data:/data
  skel-build:
    extends: repo
    user: agl
    tty: false

    build:
      context: .
      args:
        - _AGL=agl
        - _HALO=halo
      # network: ${COMPOSE_PROJECT_NAME}_default

      # init: true
      # volumes:
      #   - dvl-data:/home/dvl
      #   - agl-data:/home/${_AGL:-agl}
      #   - mnt-data:/mnt/data
    # depends_on:
    #   skel:
    #     # Wait for the ownership to change
    #     condition: service_started
    volumes:
      - fs-data:/fs
      - good-data:/home/good
      # - hell-data:/fs
      # - halo-data:/fs
      # # - dvl-data:/home/${_DVL_USR:-dvl}
      - dvl-data:/home/dvl
      # # - agl-data:/home/${_AGL_USR:-agl}
      - agl-data:/home/agl
      - dvlw-data:/home/dvl/dvlw

    labels:
      com.dvlp_skel.description: "-build skeleton"
  skel:
    extends: skel-build
    entrypoint:
      - sleep
      - infinity
    build:
      context: .
      target: dvlp_skel
    # depends_on:
      # bare:
      #   # Wait for the ownership to change
      #   condition: service_started
    # volumes:
    #   - rootg-data:/rootg
    #   - hell-data:/hell
    #   - halo-data:/halo
    #   - mnt-data:/mnt/data
    #   # - dvl-data:/home/${_DVL_USR:-dvl}
    #   - dvl-data:/home/dvl
    #   # - agl-data:/home/${_AGL_USR:-agl}
    #   - agl-data:/home/agl
    #   - good-data:/home/good
    labels:
      com.dvlp_skel.description: "skeleton"
  bare:
    # owner/group becomes owner of dvl-data volume
    extends: skel
    restart: on-failure
    tty: true
    entrypoint:
      - sleep
      - infinity
    user: dvl
    working_dir: /home/dvl
    privileged: true
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-bare
    # extends: skel
    build:
      context: .
      target: dvlp_bare
      args:
        - _AGL_USR=${_AGL:-agl}
        - mnt_data=${mnt_data:-/mnt/data}
        - CONFIG_FILE
    depends_on:
      base:
        # Wait for the ownership to change
        condition: service_completed_successfully
    init: true
    volumes:
      # - dvlw-data:/halo/hal/dvlw
      # - dvlw-data:/root/root/dvlw
      - fs-data:/root
      - good-data:/root/root
      - fs-data:/hell
      - dvl-data:/hel
      - dvl-data:/hell/hel
      - fs-data:/halo
      - agl-data:/hal
      - agl-data:/halo/hal
      - mnt-data:/mnt/data
      - dls-data:/mnt/data/dls
      - dls-data:/dls
      - dls-data:/home/good/dls
      - dls-data:/home/agl/dls
      - dls-data:/home/dvl/dls
    labels:
      com.devels-playground.description: "basics + git"
  git-lite:
    # owner/group becomes owner of dvl-data volume
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-git-lite
    # extends: skel
    build:
      context: .
      target: dvlp_git-lite
    labels:
      com.devels-playground.description: "basics + git"

  git:
    # owner/group becomes owner of dvl-data volume
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-git
    # extends: skel
    build:
      context: .
      target: dvlp_git
    labels:
      com.devels-playground.description: "basics + git"
  python-build:
    extends: bare
    build:
      context: .
      target: dvlp_python-build
    labels:
      com.devels-playground.description: "basics + git"
  python-build-lite:
    extends: bare
    build:
      context: .
      target: dvlp_python-build-lite
    depends_on:
      python-build:
        # Wait for the ownership to change
        condition: service_completed_successfully
    labels:
      com.devels-playground.description: "basics + git"
  python-lite:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-py-lite
    build:
      context: .
      target: dvlp_python-lite
    depends_on:
      python-build:
        # Wait for the ownership to change
        condition: service_started
    labels:
      com.devels-playground.description: "basics + git"
  python:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-py
    build:
      context: .
      target: dvlp_python
    depends_on:
      python-build:
        # Wait for the ownership to change
        condition: service_completed_successfully
    labels:
      com.devels-playground.description: "basics + git"
  msdot-lite:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-msdot-lite
    build:
      context: .
      target: dvlp_msdot-lite
    labels:
      com.devels-playground.description: "basics + git + powerhell"
  msdot:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-msdot
    build:
      context: .
      target: dvlp_msdot
    labels:
      com.devels-playground.description: "basics + git + powerhell"
  dind:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-dind
    build:
      context: .
      target: dvlp_dind
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker"
  dind-lite:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-dind-lite
    build:
      context: .
      target: dvlp_dind-lite
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel"
  basic-wsl-kernel-builder:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-basic-wsl-kernel-builder
    build:
      context: .
      target: dvlp_basic-wsl-kernel-builder
      # args:
      #   - CONFIG_FILE=${CONFIG_FILE:-dvlw/dvlp/kernels/linux/x86/generic/.config_wsl0}
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel"
  basic-wsl-zfs-kernel-builder:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:basic-wsl-zfs-kernel-builder
    build:
      context: .
      target: dvlp_basic-wsl-zfs-kernel-builder
      # args:
      #   - CONFIG_FILE=${CONFIG_FILE:-dvlw/dvlp/kernels/linux/x86/generic/.config_wsl0}
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel"
  stable-wsl-zfs-kernel-builder:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:stable-wsl-zfs-kernel-builder
    build:
      context: .
      # target: dvlp_stable-wsl-zfs-kernel-builder
      # args:
      #   - CONFIG_FILE=${CONFIG_FILE:-dvlw/dvlp/kernels/linux/x86/generic/.config_wsl0}
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel"
  latest-rc-wsl-zfs-kernel-builder:
    extends: bare
    image: kindtek/${HUB_REPO:-devels-playground}:latest-rc-wsl-zfs-kernel-builder
    build:
      context: .
      target: dvlp_latest-rc-wsl-zfs-kernel-builder
      # args:
      #   - CONFIG_FILE=${CONFIG_FILE:-dvlw/dvlp/kernels/linux/x86/generic/.config_wsl0}
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel"
  gui-lite:
    extends: bare
    user: agl
    entrypoint:
      - /bin/bash
      - -c
      - sudo
      - /home/dvl/start-kde.sh
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-gui
    build:
      context: .
      target: dvlp_gui-lite
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel + gui"
  gui:
    extends: gui-lite
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-gui
    build:
      context: .
      target: dvlp_gui
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel + gui"
  gui-plus:
    extends: gui-lite
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-gui-plus
    build:
      context: .
      target: dvlp_gui-plus
    labels:
      com.devels-playground.description: "basics + git + powerhell + docker + kernel + gui"
  cuda:
    extends: gui-lite
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-cuda
    build:
      context: .
      target: dvlp_cuda
      args:
        - _AGL_USR=${_AGL:-agl}
      labels:
        com.dvlp_cuda.description: "basics + git + powerhell + docker + gui + cuda"

  cuda-plus:
    extends: gui-lite
    image: kindtek/${HUB_REPO:-devels-playground}:ubuntu-cuda-plus
    build:
      context: .
      target: dvlp_cuda-plus
      args:
        - _AGL_USR=${_AGL:-agl}
      labels:
        com.dvlp_cuda.description: "basics + git + powerhell + docker + gui + cuda"
volumes:
  fs-data:
  mnt-data:
  dls-data:
  dvl-data:
  agl-data:
  good-data:
  rootg-data:
  hell-data:
  halo-data:
  dvlw-data:


networks:
  "${COMPOSE_PROJECT_NAME}_default":
    driver: overlay
    attachable: true
