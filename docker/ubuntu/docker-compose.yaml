version: "3.9"
name: dvl-playg-ubuntu
services:
  base:
    build:
      context: .
      target: dvlp_base
      # args: 
      #   - _AGL_USR=$_AGL
      #   - _DVL_USR=$_DVL
    init: true
    # command:
    # - /bin/bash
    # - -c
    # - export _AGL=agl
    # - export _HALO=${_HALO:-halo}
    # - sleep
    # - infinity
    # - ln -sf /home /mnt
    # - mkdir -p /mnt/data
    # - ln -sf /mnt/data /tmp/data
    # command: echo something
  base-god:
    # Need a user priviliged enough to chown
    user: root
    # Specify the wings in question
    group_add:
      - rootg
      - halo
      - hell
    build:
      context: .
      target: dvlp_god
    depends_on:
      base:
        condition: service_completed_successfully
    # volumes:
    #   - god-data:/root:ro
    #   - gdi-data:/home/god
  base-angel:
    # Need a user priviliged enough to chown
    user: agl
    # Specify the wings in question
    group_add:
      - halo
    build:
      context: .
      target: dvlp_agl
    depends_on:
      base:
        condition: service_completed_successfully
    # volumes:
    #   - hell-data:/home/agl
  base-devel:
    user: dvl
    group_add:
      - hell
    build:
      context: .
      target: dvlp_dvl
    depends_on:
      base:
        # Wait for groups to be added
        condition: service_completed_successfully
    # volumes:
    #   - hell-data:/home/dvl
    init: true
  # alias(es) for agl
  # base-ausr:
  #   user: _AGL_USR
  #   extends: base-angel
  #   build:
  #     context: .
  #     target: dvlp_agl
  #     args:
  #       - _AGL_USR=${_AGL:-angel}
  #   volumes:
  #     - halo-data:/home/${_AGL_USR}
  #   init: true
  # # alias(es) for dvl
  # base-daus:
  #   user: _DVL_USR
  #   extends: init-dvl
  #   build:
  #     context: .
  #     target: dvlp_dvl
  #     args:
  #       - _DVL_USR=${_DVL-:devel}
  #   volumes:
  #     - hell-data:/home/$_DVL_USR
  data:
    user: agl
    group_add:
      - halo
    build:
      context: .
      target: dvlp_data
    depends_on:
      base:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-god:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-angel:
        # Wait for the ownership to change
        condition: service_completed_successfully
      base-devel:
        # Wait for the ownership to change
        condition: service_completed_successfully
    # # init: true
    # volumes_from:
    #   - base-angel
    #   - base-devel
    volumes:
      - god-data:/root:ro
      - gdi-data:/home/god:rw
      - hell-data:/home/dvl
      # - hell-data:/home/devel
      # - hell-data:/home/${_DVL_USR:-dvl}
      # - halo-data:/home/${_AGL_USR:-agl}
      # - halo-data:/home/angel
      - halo-data:/home/agl
      - dls-data:/dls
      - mnt-data:/data
  skel-lite:
    extends: data
    user: agl
    tty: false
    entrypoint:
      - sleep
      - infinity
    build:
      context: .
      target: dvlp_skel
      args:
        - _AGL=agl
        - _HALO=halo
      # network: ${COMPOSE_PROJECT_NAME}_default
    init: true
    # volumes:
    #   - hell-data:/home/dvl
    #   - halo-data:/home/${_AGL:-agl}
    #   - mnt-data:/mnt/data
    depends_on:
      data:
        # Wait for the ownership to change
        condition: service_completed_successfully
    volumes:
      # - mnt-data:/data
      # - hell-data:/home/${_DVL_USR:-dvl}
      - hell-data:/home/dvl
      # - halo-data:/home/${_AGL_USR:-agl}
      - halo-data:/home/agl
      # - gdi-data:/home/god

    labels:
      com.dvlp_skel.description: "lite skeleton"
  skel:
    extends: skel-lite
    labels:
      com.dvlp_skel.description: "skeleton"    
  git:
    # owner/group becomes owner of hell-data volume
    extends: skel
    restart: on-failure
    tty: true
    # entrypoint:
    #   - sleep
    #   - infinity
    user: dvl
    privileged: true
    image: kindtek/dvlp:ubuntu-git
    # extends: skel
    build:
      context: .
      target: dvlp_git
      args:
        - _AGL_USR=${_AGL:-agl}
        - mnt_data=${mnt_data:-/mnt/data}
        - _CONFIG_FILE
    depends_on:
      data:
        # Wait for the ownership to change
        condition: service_completed_successfully
    init: true
    volumes:
      - hell-data:/hel
      - halo-data:/hal
      - god-data:/root:ro
      - gdi-data:/rootg
      - mnt-data:/mnt/data
      - dls-data:/mnt/data/dls

    labels:
      com.dvl-playg.description: "basics + git"
  python:
    extends: git
    image: kindtek/dvlp:ubuntu-py
    build:
      context: .
      target: dvlp_python
    labels:
      com.dvl-playg.description: "basics + git"

  msdot:
    extends: git
    image: kindtek/dvlp:ubuntu-msdot
    build:
      context: .
      target: dvlp_msdot
    labels:
      com.dvl-playg.description: "basics + git + powerhell"

  dind:
    extends: git
    image: kindtek/dvlp:ubuntu-dind
    build:
      context: .
      target: dvlp_dind
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker"
  kernel:
    extends: git
    image: kindtek/dvlp:ubuntu-kernel
    build:
      context: .
      target: dvlp_kernel
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker + kernel"
  kernel-lite:
    extends: git
    image: kindtek/dvlp:ubuntu-kernel-lite
    build:
      context: .
      target: dvlp_kernel-lite
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker + kernel"
  kernel-plus:
    extends: git
    image: kindtek/dvlp:ubuntu-kernel-plus
    build:
      context: .
      target: dvlp_kernel-plus
      args:
        - _AGL_USR=${_AGL:-agl}
        - _CONFIG_FILE=../kernels/ubuntu/x86/generic/.config_wsl0
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker + kernel"
  gui:
    extends: git
    image: kindtek/dvlp:ubuntu-gui
    build:
      context: .
      target: dvlp_gui
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker + kernel + gui"

  gui-plus:
    extends: git
    image: kindtek/dvlp:ubuntu-gui-plus
    build:
      context: .
      target: dvlp_gui-plus
    labels:
      com.dvl-playg.description: "basics + git + powerhell + docker + kernel + gui"
  cuda:
    extends: gui
    image: kindtek/dvlp:ubuntu-cuda
    build:
      context: .
      target: dvlp_cuda
      args:
        - _AGL_USR=${_AGL:-agl}
      labels:
        com.dvlp_cuda.description: "basics + git + powerhell + docker + gui + cuda"

  cuda-plus:
    extends: gui
    image: kindtek/dvlp:ubuntu-cuda-plus
    build:
      context: .
      target: dvlp_cuda-plus
      args:
        - _AGL_USR=${_AGL:-agl}
      labels:
        com.dvlp_cuda.description: "basics + git + powerhell + docker + gui + cuda"
volumes:
  hell-data:
  halo-data:
  mnt-data:
  dls-data:
  god-data:
  gdi-data:


networks:
  "${COMPOSE_PROJECT_NAME}_default":
    driver: overlay
    attachable: true
