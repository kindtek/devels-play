# to build, run: 
# `username=mine groupname=ours docker run -d -i`

FROM ubuntu:latest AS dplay_skel
ARG username=${username:-gabriel}
ARG groupname=${groupname:-wings}
# backup location or optionally a mount partition
ARG backup_mnt_location='/mnt/n'
# partition letter set up for n:/ - use this guide to set up partition https://allthings.how/how-to-partition-a-hard-drive-on-windows-11/

# set up basic utils
RUN apt-get update -yq && \
    apt-get upgrade -y && \
    # install github, build-essentials, libssl, etc
    apt-get install -y git gh build-essential libssl-dev ca-certificates wget curl gnupg lsb-release python3 python3-pip nvi apt-transport-https software-properties-common && \
    python3 -m pip install --upgrade pip cryptography oauthlib pyjwt setuptools wheel && \
    # set up group/user 
    # addgroup --system --gid 1001 ${groupname} && \
    # adduser --system --home /home/${username} --shell /bin/bash --uid 1001 --gid 1001 --disabled-password ${username}  \
    addgroup --gid 1111 ${groupname} && \
    addgroup --gid 888 halos && \
    addgroup --gid 666 horns && \
    adduser --home /home/${username} --shell /bin/bash --uid 1011 --disabled-password ${username} && \
    # make default user 
    echo "[user]\ndefault=devel" >> /etc/wsl.conf

# custom user setup
USER ${username}
# enable cdir on nonroot shell - an absolute lifesaver for speedy nav in an interactive cli (cannot be root for install)
# also add powershell alias
RUN pip3 install cdir --user && \
    echo "export WSL_DISTRO_NAME=\$WSL_DISTRO_NAME\nexport _NIX_MNT_LOCATION='${backup_mnt_location}'\nalias cdir='source cdir.sh'\nalias grep='grep --color=auto'\nalias powershell=pwsh\nalias vi='vi -c \"set verbose showmode\"'" >> ~/.bashrc
# add common paths
ENV PATH="$PATH:~/.local/bin:/hel/devels-workshop/scripts:/hel/devels-workshop/devels-playground/scripts"
# switch back to root to setup
USER root

# add devel and host users using custom user setup
RUN adduser --system --home /home/host --shell /bin/bash --uid 888 --disabled-password host && \
    adduser --system --home /home/devel --shell /bin/bash --uid 666 --disabled-password devel && \
    cp -r ./home/${username}/.local/bin /usr/local && \
    cp -r /home/${username}/. /etc/skel/ && \
    cp -rp /etc/skel/. /home/devel/ && \
    # add only username to the sudo list
    usermod -aG halos host && usermod -aG halos ${username} && \
    usermod -aG horns devel && usermod -aG horns ${username} && \
    usermod -aG sudo ${username} && \
    # chown -R ${username}:halos /home/host
    chown -R host:halos /home/host && \
    chown -R devel:horns /home/devel && \
    # non-root will need to use sudo from now on
    apt-get -y install sudo && \
    # add ${username} to sudo group
    sudo adduser ${username} sudo && \
    # uncomment to add sudo priveleges for host / devel
    # sudo adduser devel sudo && \
    # sudo adduser host sudo && \
    # ensure no password and sudo runs as root
    passwd -d ${username} && passwd -d devel && passwd -d root && passwd -l root && \
    passwd -d ${username} && passwd -d host && passwd -d root && passwd -l root && \
    # set up /devel folder as symbolic link to /home/devel for cloning repository(ies)
    ln -s /home/devel /hel && chown -R devel:horns /hel && \
    touch /hel/lo.world && \
    mkdir /hel/.ssh && chmod 700 /hel/.ssh && chown -R devel:horns /hel/.ssh 
    # add common paths
    ENV PATH="$PATH:~/.local/bin:/hel/devels-workshop/scripts:/hel/devels-workshop/devels-playground/scripts"
    USER devel
    ENV PATH="$PATH:~/.local/bin:/hel/devels-workshop/scripts:/hel/devels-workshop/devels-playground/scripts"
    USER ${username}
    ENV PATH="$PATH:~/.local/bin:/hel/devels-workshop/scripts:/hel/devels-workshop/devels-playground/scripts"


FROM dplay_skel AS dplay_data
RUN if [ -d "/mnt/n/gabriel" ]; then \
        if [ ! -f "/mnt/n/gabriel/backup-docker.sh" ]; then \
            echo "#!/bin/bash" >> gabriel/backup-docker.sh; \
        fi \
    fi

USER ${username}
# RUN echo "# # # # Docker # # # # " >> /mnt/n/gabriel/backup-docker.sh
# RUN sudo ./mnt/n/gabriel/backup-docker.sh


FROM dplay_data AS dplay_git
WORKDIR /hel
USER devel

# add safe directories
RUN git config --global --add safe.directory /home/devel && \
    git config --global --add safe.directory /hel && \
    git config --global --add safe.directory /home/devel/devels-playground && \
    git config --global --add safe.directory * && \
    # clone fresh repos and give devel ownership
    git clone https://github.com/kindtek/devels-workshop && \
    cd devels-workshop && git pull && git submodule update --force --recursive --init --remote && cd .. && \
    chown devel:horns -R /home/devel/devels-workshop /home/devel/devels-workshop/.git && \
    # add symlinks for convenience
    ln -s devels-workshop dwork && ln -s devels-workshop/devels-playground dplay && \
    # make backup script executable
    chmod +x dwork/mnt/backup.sh

# mount with halos ownership
USER ${username}
# set up shared backup drive structure 
RUN sudo mkdir -p ${backup_mnt_location}/${username}/devel-orig && \
    sudo chown ${username}:${groupname} ${backup_mnt_location}/${username} && \
    sudo chown devel:horns ${backup_mnt_location}/${username}/devel-orig && \
    # copy newly pulled backup script to mount location
    sudo cp -arf dwork/mnt/backup.sh ${backup_mnt_location}/${username}/backup-devel.sh && \
    # make rwx for owner and rx for group/others
    sudo chmod 755 -R ${backup_mnt_location}/${username} && \
    # add warning for the backup drive
    echo "!!!!!!!!!!!!!!!!DO NOT SAVE YOUR FILES IN THIS DIRECTORY!!!!!!!!!!!!!!!!\n\nThe devel can/will delete your files if you save them in this directory. Keep files out of the devels grasp and in the neighboring *gabriel* directory.\n\n!!!!!!!!!!!!!!!!DO NOT SAVE YOUR FILES IN THIS DIRECTORY!!!!!!!!!!!!!!!!" | sudo tee ${backup_mnt_location}/README_ASAP.txt  && \
    sudo chown ${username}:${groupname} ${backup_mnt_location}/README_ASAP.txt
    # wait to do this until we have WSL_DISTRO_NAME
    # sh ${backup_mnt_location}/backup-devel.sh


# microsoft stuff
FROM dplay_git as dplay_msdot
# for powerhell install - https://learn.microsoft.com/en-us/powershell/scripting/install/install-ubuntu?view=powershell-7.3
## Download the Microsoft repository GPG keys
USER ${username}
RUN sudo wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb" && \
    ## Register the Microsoft repository GPG keys
    sudo dpkg -i packages-microsoft-prod.deb && \
    sudo rm packages-microsoft-prod.deb && \
    sudo apt-get update -yq && \
    sudo apt-get install -y powershell dotnet-sdk-7.0

FROM dplay_msdot as dplay_dind

USER root
# DOCKER - https://docs.docker.com/engine/install/ubuntu/
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-compose-plugin docker-ce docker-ce-cli containerd.io 

USER devel
RUN echo "export DOCKER_HOST=tcp://localhost:2375" >> ~/.bashrc && . ~/.bashrc

USER ${username}
RUN echo "export DOCKER_HOST=tcp://localhost:2375" >> ~/.bashrc && . ~/.bashrc


# for heavy gui (wsl2 required)
FROM dplay_dind as dplay_gui
USER root
# for brave install - https://linuxhint.com/install-brave-browser-ubuntu22-04/
RUN curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=$(dpkg --print-architecture)] https://brave-browser-apt-release.s3.brave.com/ stable main"| tee /etc/apt/sources.list.d/brave-browser-release.list  && \
    # in order to get 'brave-browser' to work you may need to run 'brave-browser --disable-gpu'
    apt-get update -yq && \
    apt-get install -y brave-browser && \
    cp /opt/brave.com/brave/brave-browser /opt/brave.com/brave/brave-browser.old && \
    # change last line of this file - fix for brave-browser displaying empty windows
    head -n -1 /opt/brave.com/brave/brave-browser.old > /opt/brave.com/brave/brave-browser && \
    # now no longeer need to add --disable-gpu flag everytime
    echo '"$HERE/brave" "$@" " --disable-gpu " || true' >> /opt/brave.com/brave/brave-browser && \
    # GNOME
    DEBIAN_FRONTEND=noninteractive apt-get -yq install gnome-session gdm3 gimp gedit nautilus vlc x11-apps xfce4

USER ${username}

FROM dplay_gui as dplay_cuda
# CUDA
RUN sudo apt-get -y install nvidia-cuda-toolkit
